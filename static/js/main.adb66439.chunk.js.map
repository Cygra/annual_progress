{"version":3,"sources":["utils/progress.ts","components/Basic/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getProgress","currentDate","Date","currentMilliSeconds","getTime","currentYear","getFullYear","startOfYear","parse","getProgressDisplay","progress","fix","toFixed","Basic","state","isRippling","style","undefined","handleEvent","pageX","pageY","left","top","setState","setTimeout","this","width","props","className","onMouseDown","Component","App","useState","setProgress","useEffect","document","title","interval","setInterval","bind","clearInterval","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8QAAaA,G,MAAc,WACzB,IAAMC,EAAc,IAAIC,KAClBC,EAAsBF,EAAYG,UAClCC,EAAcJ,EAAYK,cAC1BC,EAAcL,KAAKM,MAAL,cAAkBH,IAEtC,OAAQF,EAAsBI,IADZL,KAAKM,MAAL,cAAkBH,EAAc,IACQE,KAG/CE,EAAqB,SAACC,EAAkBC,GACnD,MAAM,GAAN,QAAsB,IAAXD,GAAgBE,QAAQD,GAAO,GAA1C,M,mCCDWE,G,MAAb,2MACEC,MAAe,CACbC,YAAY,EACZC,WAAOC,GAHX,EAMUC,YAAc,YAG+B,IAFnDC,EAEkD,EAFlDA,MACAC,EACkD,EADlDA,MAEA,IAAI,EAAKN,MAAMC,WAAf,CACA,IAAMC,EAAQ,CAAEK,KAAK,GAAD,OAAKF,EAAQ,IAAb,MAAsBG,IAAI,GAAD,OAAKF,EAAQ,IAAb,OAC7C,EAAKG,SACH,CACEP,QACAD,YAAY,IAEd,WACES,YACE,kBAAM,EAAKD,SAAS,CAAER,YAAY,EAAOC,WAAOC,MAChD,UApBV,wEA0BY,IAAD,EACuBQ,KAAKX,MAA3BC,EADD,EACCA,WAAYC,EADb,EACaA,MAClBU,EAAQjB,EAAmBgB,KAAKE,MAAMjB,UACxC,OACE,yBACEkB,UAAU,WACVZ,MAAO,CAAEU,SACTG,YAAaJ,KAAKP,aAElB,0BAAMU,UAAU,oBAAoBF,GACpC,0BACEE,UAAS,sBAAiBb,EAAa,WAAa,IACpDC,MAAOA,SAtCjB,GAA2Bc,cCaZC,EAjBO,WAAO,IAAD,EACMC,mBAAiB,GADvB,mBACnBtB,EADmB,KACTuB,EADS,KAU1B,OARAC,qBAAU,WACRC,SAASC,MAAQ3B,EAAmBT,IAAe,GACnD,IAAMqC,EAAWC,YACfL,EAAYM,UAAKtB,GAAW,kBAAMjB,OAClC,KAEF,OAAO,kBAAMwC,cAAcH,MAC1B,IAED,yBAAKT,UAAU,OACb,kBAAC,EAAD,CAAOlB,SAAUA,MCLH+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASZ,SAASa,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.adb66439.chunk.js","sourcesContent":["export const getProgress = () => {\n  const currentDate = new Date();\n  const currentMilliSeconds = currentDate.getTime();\n  const currentYear = currentDate.getFullYear();\n  const startOfYear = Date.parse(`1/1/${currentYear}`);\n  const endOfYear = Date.parse(`1/1/${currentYear + 1}`);\n  return (currentMilliSeconds - startOfYear) / (endOfYear - startOfYear);\n};\n\nexport const getProgressDisplay = (progress: number, fix?: number): string => {\n  return `${(progress * 100).toFixed(fix || 7)}%`;\n};\n","import React, { Component, CSSProperties } from \"react\";\nimport { getProgressDisplay } from \"../../utils\";\nimport \"./style.scss\";\n\ninterface State {\n  isRippling: boolean;\n  style?: CSSProperties;\n}\n\nexport class Basic extends Component<{ progress: number }, State> {\n  state: State = {\n    isRippling: false,\n    style: undefined\n  };\n\n  private handleEvent = ({\n    pageX,\n    pageY\n  }: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (this.state.isRippling) return;\n    const style = { left: `${pageX - 500}px`, top: `${pageY - 500}px` };\n    this.setState(\n      {\n        style,\n        isRippling: true\n      },\n      () => {\n        setTimeout(\n          () => this.setState({ isRippling: false, style: undefined }),\n          2000\n        );\n      }\n    );\n  };\n\n  render() {\n    const { isRippling, style } = this.state,\n      width = getProgressDisplay(this.props.progress);\n    return (\n      <div\n        className=\"progress\"\n        style={{ width }}\n        onMouseDown={this.handleEvent}\n      >\n        <code className=\"progress-display\">{width}</code>\n        <span\n          className={`ripple-pond ${isRippling ? \"rippling\" : \"\"}`}\n          style={style}\n        />\n      </div>\n    );\n  }\n}\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { getProgress, getProgressDisplay } from \"./utils\";\nimport { Basic } from \"./components\";\n\nconst App: React.FC = () => {\n  const [progress, setProgress] = useState<number>(0);\n  useEffect(() => {\n    document.title = getProgressDisplay(getProgress(), 2);\n    const interval = setInterval(\n      setProgress.bind(undefined, () => getProgress()),\n      100\n    );\n    return () => clearInterval(interval);\n  }, []);\n  return (\n    <div className=\"App\">\n      <Basic progress={progress} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}